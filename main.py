def show_source_select_dialog():
    """
    Показывает диалог выбора файла.
    Сохраняет выбранный файл в source_file_path.
    """
    pass


def check_source_file_path():
    """
    Проверяет выбранный путь до файла-источника.
    Если путь введен, активирует кнопку «Анализировать источник».
    Если путь пустой, блокирует кнопку «Анализировать источник».
    TODO: валидация типа файла
    """
    pass


def interface_is_active(condition: bool):
    """
    Активирует/блокирует интерфейс:
    кнопку «Выбрать источник»
    поле выбора пути до файла-источника текста
    кнопку «Анализировать источник»
    виджет «Количество слов в результате»
    виджет «Часть речи»
    """
    pass


def get_text_str() -> str:
    """
    Открывает файл и забирает содержимое в строку.
    """
    return "Какая-то строка текста для анализа. Ё! ё"


def get_word_type() -> list:
    """
    Создает список и добавляет в него части речи из виджета «Части речи»
    """
    return ["глагол", "существительное"]


def prepare_text(text_str: str) -> list:
    """
    Делает все буквы строчными.
    Заменяет букву «ё» на «е».
    Разбирает текст на слова и делает из них список.
    """
    return ["какая-то", "строка", "текста", "для", "анализа.", "ё!", "ё"]


def morph_analyze_text(text_list: list, word_type_list: list) -> list:
    """
    Проходит по всем словам в списке.
    Добавляет все существительные в нормальной форме в новый список.
    TODO: брать парсы с максимальным score
    """
    return ["какая-то", "строка", "текста", "для", "анализа.", "е", "е"]


def count_words(normal_list: list) -> dict:
    """
    Считает повторы слов.
    Записывает результат в словарь по убыванию повторов в виде
    слово : количество
    Количество пар в словаре зависит от выбранного пользователем в пункте
    «Количество слов в результате»
    """
    return {"слово" : 10, "еще одно" : 7}


def result_to_widget(result_dict: dict):
    """
    Записывает пары словаря построчно по убыванию в виджет «Результат»
    """
    result_list = []

    for key, value in result_dict.items():
        line = f"{key} : {value}\n"
        result_list.append(line)


def save_result_to_file():
    """
    Сохраняет содержимое виджета «Результат» в выбранный файл.
    Выдает сообщение в виджет «Ход выполнения программы».
    """
    pass


def main():
    word_type_list = get_word_type()
    text_str = get_text_str()
    text_list = prepare_text(text_str)
    normal_list = morph_analyze_text(text_list, word_type_list)
    result_dict = count_words(normal_list)
